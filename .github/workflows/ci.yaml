name: 'CI'

on:
    pull_request:
    push:

jobs:
    coding-standards:
        name: 'Coding Standards - PHP ${{ matrix.php-version }}'
        runs-on: 'ubuntu-latest'
        # We want to run on external PRs, but not on our own internal PRs as they'll be run by the push to the branch.
        if: ${{ !(github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository) }}

        strategy:
            fail-fast: false
            matrix:
                php-version:
                    - '7.4'

        steps:
            -   name: 'Checkout code'
                uses: actions/checkout@v2

            -   name: 'Setup Build'
                uses: ./.github/actions/setup-build
                with:
                    php-version: '${{ matrix.php-version }}'
                    composer-token: ${{ secrets.GITHUB_TOKEN }}

            -   name: "PHP Coding Standards Fixer"
                run: php-cs-fixer fix --dry-run --diff --using-cache=no

            -   name: "PHP Code Style Sniffer"
                if: always()
                run: vendor/bin/phpcs --standard=php_cs.xml app/src src tests

            -   name: "Psalm"
                if: always()
                run: vendor/bin/psalm

    unit-tests:
        name: 'Unit Tests - PHP ${{ matrix.php-version }}, Symfony ${{ matrix.symfony-version }}'
        runs-on: ubuntu-latest
        # We want to run on external PRs, but not on our own internal PRs as they'll be run by the push to the branch.
        if: ${{ !(github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository) }}

        strategy:
            fail-fast: false
            matrix:
                include:
                    # Lowest possible configuration
                    -   php-version: '7.2.5'
                        dependency-versions: 'lowest'
                        symfony-version: '4.4.*'

                    # Test against latest Symfony 4.4
                    -   php-version: '8.0'
                        symfony-version: '4.4.*'

                    # Test against latest Symfony 5
                    -   php-version: '8.1'
                        symfony-version: '5.*'

        steps:
            -   name: 'Checkout code'
                uses: actions/checkout@v2

            -   name: 'Setup Build'
                uses: ./.github/actions/setup-build
                with:
                    php-version: '${{ matrix.php-version }}'
                    composer-token: ${{ secrets.GITHUB_TOKEN }}
                    composer-dependency-versions: '${{ matrix.dependency-versions }}'
                    symfony-version: '${{ matrix.symfony-version }}'

            -   name: 'Run tests'
                run: vendor/bin/phpunit

    integration-tests:
        name: 'Integration Tests - PHP ${{ matrix.php-version }}, Symfony ${{ matrix.symfony-version }}, Config ${{ matrix.app-config }}'
        runs-on: ubuntu-latest
        # We want to run on external PRs, but not on our own internal PRs as they'll be run by the push to the branch.
        if: ${{ !(github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository) }}

        strategy:
            fail-fast: false
            matrix:
                include:
                    # DEFAULT configuration (old security system)

                    # Symfony 4.4 on minimum PHP version
                    -   php-version: '7.2.5'
                        symfony-version: '4.4.*'
                        app-config: 'default'

                    # Latest Symfony 4.4
                    -   php-version: '8.0'
                        symfony-version: '4.4.*'
                        app-config: 'default'

                    # Latest Symfony 5
                    -   php-version: '8.2'
                        symfony-version: '5.*'
                        app-config: 'default'

                    # AUTHENTICATORS configuration (experimental security system)
                    -   php-version: '8.0'
                        symfony-version: '5.3.*'
                        app-config: 'authenticators'

                    # AUTHENTICATORS configuration (experimental security system)
                    -   php-version: '8.2'
                        symfony-version: '5.4.*'
                        app-config: 'authenticators'

        steps:
            -   name: 'Checkout code'
                uses: actions/checkout@v2

            -   name: 'Setup Build'
                uses: ./.github/actions/setup-build
                with:
                    php-version: '${{ matrix.php-version }}'
                    composer-token: ${{ secrets.GITHUB_TOKEN }}
                    composer-working-dir: app
                    symfony-version: '${{ matrix.symfony-version }}'

            -   name: 'Run tests'
                run: app/vendor/bin/phpunit -c app
                env:
                    TEST_CONFIG: '${{ matrix.app-config }}'

    code-coverage:
        name: 'Code Coverage - PHP ${{ matrix.php-version }}'
        runs-on: 'ubuntu-latest'
        # We want to run on external PRs, but not on our own internal PRs as they'll be run by the push to the branch.
        if: ${{ !(github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository) }}

        strategy:
            fail-fast: false
            matrix:
                php-version:
                    - '8.2'

        steps:
            -   name: 'Checkout code'
                uses: actions/checkout@v2

            -   name: 'Setup Build'
                uses: ./.github/actions/setup-build
                with:
                    php-version: '${{ matrix.php-version }}'
                    composer-token: ${{ secrets.GITHUB_TOKEN }}

            -   name: 'Run tests with coverage'
                run: phpdbg -qrr vendor/bin/phpunit --coverage-clover coverage/clover.xml

            -   name: 'Send Coverage to Codecov'
                uses: codecov/codecov-action@v2
                with:
                    token: ${{ secrets.CODECOV_TOKEN }}
                    files: coverage/clover.xml
                    flags: unittests
                    fail_ci_if_error: true
